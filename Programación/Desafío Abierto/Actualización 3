#include <Servo.h>
#include <Wire.h>
#include <MPU6050.h>

// Crear una instancia del objeto MPU6050
MPU6050 mpu;

//configuracion de pines de los sensores de distancia
#define trigPin1 7
#define trigPin2 5
#define trigPin3 6
#define trigPin4 12
#define echoPin1 8
#define echoPin2 9 
#define echoPin3 10 
#define echoPin4 11 

//Configuracion de pines de los botones de inicio
#define buttonPin 1

//Configuracion de los pines de los motores (cc y servo)
#define motorPin1 2
#define motorPin2 4
#define servoPin 3

//nombre del serovmotor
Servo direccion;

long duration, distance;

//todas las variables para los sensores de dirrecion
long durationAde = 0;
long durationAtras = 0;
long durationIzq = 0;
long durationDerch = 0;

long distanceAde= 0;
long distanceAtras = 0;
long distanceIzq = 0;
long distanceDerch = 0;

int a = 0;
int i = 0;
int d;
int motor;

int buttonState;
int estado;
void setup() {
  Serial.begin(9600);
  pinMode(trigPin1, OUTPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(trigPin3, OUTPUT);
  pinMode(trigPin4, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(echoPin2, INPUT);
  pinMode(echoPin3, INPUT);
  pinMode(echoPin4, INPUT);

  pinMode(buttonPin, INPUT_PULLUP);

  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);

  direccion.attach(servoPin);

  Wire.begin();
  
  // Inicializar el sensor MPU-6050
  mpu.initialize();
  
  // Verificar la conexi贸n
  if (mpu.testConnection()) {
    Serial.println("Conexi贸n establecida con el MPU-6050");
  } else {
    Serial.println("Error en la conexi贸n con el MPU-6050");
  }
}

void loop() {
  /*buttonState = digitalRead(buttonPin);
  if (buttonState == HIGH){
    estado = 1;
    Serial.println("Iniciando programa");
  }
  leerdistancia();
  if (estado == 1){
        Serial.println("Iniciando programa"); */
    if (distanceDerch>distanceIzq) {
    if(distanceDerch>120){
      direccion.write(50);
      //Serial.println("Derecha");
      avanzar();
      //delay(200);
      /*
      delay(250);
      direccion.write(120);
      avanzar();
      delay(15);
      */

      d = 50;
    }
    else {
      avanzar();
      //Serial.println("Adelante");
    }
  }
  else if (distanceIzq>distanceDerch) {
    if (distanceIzq>120) {
      direccion.write(140);
      //Serial.println("Izquierda");
      avanzar();
      //delay(200);
      /*
      delay(250);
      direccion.write(50);
      avanzar();
      delay(15);
      */
      d = 120;
    }
    else {
      //Serial.println("Adelante");
    }
  }
  else if (distanceDerch < 20){
    direccion.write(110);
    avanzar();
  }
  else if (distanceIzq < 20){
    direccion.write(80);
    avanzar();
  }
  else{
    adelante();
  }
  //}
    // Variables para almacenar la lectura del giroscopio
  int16_t gx, gy, gz;

  // Leer los valores del giroscopio
  mpu.getRotation(&gx, &gy, &gz);

  // Mostrar los valores del giroscopio en el Monitor Serial
  Serial.print("Giroscopio - ");
  Serial.print("X: ");
  Serial.print(gx);
  Serial.print(", Y: ");
  Serial.print(gy);
  Serial.print(", Z: ");
  Serial.println(gz);
}


void leerdistancia(){  
    // Sensor 4
  digitalWrite(trigPin4, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin4, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin4, LOW);
  duration = pulseIn(echoPin4, HIGH);
  distance = duration * 0.034 / 2;
  distanceAde = distance;
  
  Serial.print("Sensor 4: ");
  Serial.print(distanceAde);
  Serial.print(" cm");
  Serial.print("   "); 
  
  duration = 0;
  distance = 0;

  // Sensor 2
  digitalWrite(trigPin2, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin2, LOW);
  duration = pulseIn(echoPin2, HIGH);
  distance = duration * 0.034 / 2;

  distanceDerch = distance;
  /*
    if(distanceDerch > 350){
    distanceDerch = 40;
  }*/
  
  Serial.print("Sensor 2: ");
  Serial.print(distanceDerch);
  Serial.print(" cm");

  Serial.print("   ");
  
  duration = 0;
  distance = 0;

  // Sensor 3
  digitalWrite(trigPin3, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin3, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin3, LOW);
  duration = pulseIn(echoPin3, HIGH);
  distance = duration * 0.034 / 2;
  distanceIzq = distance;
  
  Serial.print("Sensor 3: ");
  Serial.print(distanceIzq);
  Serial.print(" cm"); 

  Serial.println("   ");

  duration = 0;
  distance = 0;
  
  // Sensor 1
  digitalWrite(trigPin1, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin1, HIGH); 
  delayMicroseconds(10);
  digitalWrite(trigPin1, LOW);
  duration = pulseIn(echoPin1, HIGH);
  distance = duration * 0.034 / 2;

  distanceAtras = distance;
  /*
  Serial.print("Sensor 1: ");
  Serial.print(distanceAtras);
  Serial.print(" cm");
  Serial.println("   ");*/

  distance = 0;
  duration = 0;
}

void adelante() {
  direccion.write(100); // Posici贸n del servo para avanzar

  digitalWrite(motorPin1,LOW);
  digitalWrite(motorPin2,HIGH);
  /*
  if(i<=10){
    digitalWrite(motorPin1,LOW);
    digitalWrite(motorPin2,HIGH);
    i= i+1;
  }
  else if (i<25){
    digitalWrite(motorPin2, LOW);
    i = i +1;
  } 
  else if (i == 25){
    i = 0;
  
  }
  */
  //Serial.print(i);
  //Serial.println(motor);
}

void avanzar() {
  digitalWrite(motorPin1,LOW);
  digitalWrite(motorPin2,HIGH);
  /*
  if(a <= 10){
    digitalWrite(motorPin1,LOW);
    digitalWrite(motorPin2,HIGH);
    a = a +1 ;
  }
  else if (a < 25){
    digitalWrite(motorPin2, LOW);
    a = a +1;
  }
  else if (a == 25){
    a = 0;
  }
  //Serial.println(motor);
  //Serial.println(a);
  */
}
void stop() {
  digitalWrite(motorPin1,LOW);
  digitalWrite(motorPin2,LOW);
}
